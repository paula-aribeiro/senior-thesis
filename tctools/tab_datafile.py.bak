# -*- coding: utf-8 -*-

from builtins import open
from collections import OrderedDict

import numpy as np


def load_regular_table(fname, ncol=None, sort=None):
    """
    Load thermodynamical data from table generated by Thermo-Calc

    Parameters
    ----------
    fname : string
        File name
    ncol : integer
        Number of columns in the file/table
    sort : integer, optional
        If a integer is supplied, the data will be sorted based on the
        'sort'-th column; default: None

    Returns
    -------
    tuple of array_like objects containing the thermodynamical data 
    gotten from the file 'fname'.
    """
    table = []
    with open(fname, errors='ignore') as f:
        for line in f:
            try:
                arr = list(map(float, line.split()))
                if len(arr) > 0:
                    if ncol is not None:
                        if len(arr) == ncol:
                            table.append(arr)
                    else:
                        table.append(arr)
            except:
                pass
    table = np.array(table)
    if type(sort) == int:
        try:
            ind = np.argsort(table[:, sort])
            table = table[ind, :]
        except:
            print('Invalid value of "sort". Sorting ignored.')
    return table


def _isfloat(x):
    try:
        float(x)
    except:
        return False
    return True


def load_table(fname, sort=0, fill=np.nan):
    """
    Load thermodynamical data from table generated by Thermo-Calc

    Parameters
    ----------
    fname : string
        File name
    sort : str or integer, optional
        If a str is provided, sort is interpreted as the name of column 
        used to sort the data.
        If a integer is provided, the data will be sorted based on the
        'sort'-th column.
        default: 0

    Returns
    -------
    Ordered dictionary
    """
    regionlist = []  # list containing list of phases in each phase region
    cnameslist = []
    tablelist = []

    with open(fname, errors='ignore') as f:
        getphases = False
        newregion = False

        for line in f:
            # removes leading and trailing chars ' ', '\t', '\n', and ','
            line = line.strip(' \t\n,')

            if 'Phase Region for' in line:
                # new phase region
                newregion = True
                # start getting list of phases in phase region
                getphases = True

                phases = []  # list of phases in phase region
                cnames = []  # column names
                table = []  # numeric data
                continue

            if 'col' in line:
                # stop getting list of phases in phase region
                getphases = False
                # get list of cnames
                cnames += [col.split('=')[1] for col in line.split(',')]
                continue

            if getphases:
                # get phase in phase region and append to 'phases'
                phases.append(line)
                continue

            if line:
                try:
                    # split line into list and filter float values
                    arr = map(float, filter(_isfloat, line.split()))
                    table += list(arr)
                except Exception as ex:
                    print(ex)
                    pass
                continue

            if newregion:
                newregion = False
                # append list of phases to 'regionlist'
                regionlist.append(phases)
                # append columns names to 'cnameslist'
                cnameslist.append(cnames)
                # append table to 'tablelist'
                tablelist.append(np.array(table).reshape(-1, len(cnames)))

        if newregion:
            regionlist.append(phases)
            cnameslist.append(cnames)
            tablelist.append(np.array(table).reshape(-1, len(cnames)))

    # create ordered dictionary whose keys are the column names and the values
    # are empty lists
    cnamesset = []
    dictlist = []
    for cname in sum(cnameslist, []):
        if cname not in cnamesset:
            dictlist.append((cname, []))
    tabledict = OrderedDict(dictlist)

    for cnames, table in zip(cnameslist, tablelist):
        n = len(table)

        for k in tabledict.keys():
            tabledict[k] += [fill]*n

        for cname, cdat in zip(cnames, table.T):
            tabledict[cname][-n:] = cdat

    try:
        order = None

        if isinstance(sort, str):
            # if sort is string, interpret sort as key of tabledict
            order = np.argsort(tabledict[sort])
        elif isinstance(sort, int):
            # if sort is integer, interpret sort as column number
            order = np.argsort(list(tabledict.values())[sort])

        if isinstance(order, np.ndarray):
            # sort data
            for k, v in tabledict.items():
                tabledict[k] = np.array(v)[order]
    except Exception as ex:
        print(ex)

    return tabledict

if __name__ == '__main__':
    # dat = load_table('examples/NP_EUROFER.DAT', sort=0)
    dat = load_table('/home/arthur/Dropbox/Pesquisa/Doutorado/Delft2016/model/thermo/FoFo_Fe-C-Mn-Si/375-fcc.txt')